{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","document","setDocument","dialogueLines","setDialogueLines","criteriaScores","setCriteriaScores","annotating","setAnnotating","getDocument","a","texts","JSON","parse","stringify","jsonData","text","Math","floor","random","length","lines","dialogue","split","expandedLines","forEach","line","push","useEffect","criteriaChangeFunctions","value","currScores","marks","onMouseOverHighlightedWordCallback","range","onTextHighlightedCallback","newDialogueLines","data","console","log","className","Array","from","_","i","map","num","ranges","slice","enabled","onTextHighlighted","id","onMouseOverHighlightedWord","highlightStyle","backgroundColor","type","onClick","summary1","summary2","criteria","min","max","step","onChange","defaultValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6TAwKeA,MA/Jf,WACE,MAA8BC,mBAAS,IAAvC,mBAAKC,EAAL,KAAeC,EAAf,KACA,EAAwCF,mBAAS,IAAjD,mBAAKG,EAAL,KAAoBC,EAApB,KACA,EAA0CJ,mBAAS,CAAC,WAAa,EAAG,UAAY,EAAG,UAAY,EAAG,SAAW,EAAG,mBAAmB,IAAnI,mBAAKK,EAAL,KAAqBC,EAArB,KACA,EAAkCN,oBAAS,GAA3C,mBAAKO,EAAL,KAAiBC,EAAjB,KAQMC,EAAW,uCAAG,kCAAAC,EAAA,sDACdC,EAAQC,KAAKC,MAAMD,KAAKE,UAAUC,IAClCC,EAAOL,EAAMM,KAAKC,MAAMD,KAAKE,SAAWR,EAAMS,SAE9CC,EAAQL,EAAKM,SAASC,MAAM,MAC5BC,EAAgB,GACpBH,EAAMI,SAAQ,SAAAC,GACZF,EAAcG,KAAK,CAACD,OAEtBxB,EAAYc,GACZZ,EAAiBoB,GAVC,2CAAH,qDAajBI,qBAAU,WACPnB,MACC,IAEJ,IAgCIoB,EAA0B,CAAC,UA1BJ,SAACC,GAC1B,IAAIC,EAAa1B,EACjB0B,EAAU,UAAgBD,EAC1BxB,EAAkByB,IAuB6C,SArBvC,SAACD,GACzB,IAAIC,EAAa1B,EACjB0B,EAAU,SAAeD,EACzBxB,EAAkByB,IAkB6E,SAhBvE,SAACD,GACzB,IAAIC,EAAa1B,EACjB0B,EAAU,SAAeD,EACzBxB,EAAkByB,IAa6G,QAXxG,SAACD,GACxB,IAAIC,EAAa1B,EACjB0B,EAAU,QAAcD,EACxBxB,EAAkByB,IAQ2I,kBANtI,SAACD,GACxB,IAAIC,EAAa1B,EACjB0B,EAAW,mBAAqBD,EAChCxB,EAAkByB,KAKhBC,EAAO,CAEP,KAAM,mBACN,KAAM,qBACN,EAAG,cACH,EAAG,qBACH,EAAG,mBAKHC,EAAqC,SAACC,KACtCC,EAA4B,SAACD,GAC/B,IAAIE,EAAmB,GACvBjC,EAAcsB,SAAQ,SAAAC,GAChBA,EAAK,IAAIQ,EAAMG,KAAKrB,MACtBU,EAAKC,KAAKO,GAEZE,EAAiBT,KAAKD,MAExBtB,EAAiBgC,IAInB,OAFAE,QAAQC,IAAItC,GAGV,sBAAKuC,UAAU,MAAf,UACE,gCACE,sEACA,yFAGArC,EACA,mCACEsC,MAAMC,KAAK,CAACtB,OAAQjB,EAAciB,SAAS,SAACuB,EAAGC,GAAJ,OAAUA,EAAI,KAAGC,KAAI,SAACC,GAAD,OAChE,qBAAKN,UAAU,aAAf,SACCrC,EAAc2C,GACd,cAAC,IAAD,CAEAC,OAAQ5C,EAAc2C,GAAKE,MAAM,EAAE7C,EAAc2C,GAAK1B,QACrD6B,QAAS1C,EACT2C,kBAAmBf,EACnBgB,GAAI,EACJC,2BAA4BnB,EAC5BoB,eAAgB,CACdC,gBAAiB,WAEnBtC,KAAMb,EAAc2C,GAAK,IAAM,KAE/B,oCAGE,6BAINvC,EAAa,gCACP,2EAGF,cAAC,IAAD,CAAQgD,KAAK,UAAUC,QApHf,WAChBhD,GAAc,IAmHN,gCACI,6BAGTD,EAAc,6BAEb,sBAAKiC,UAAU,cAAf,UACA,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,8BAAK,6CAEJvC,EAASwD,YAEZ,gCACA,qBAAKjB,UAAU,aAAf,SAA4B,6CACzBvC,EAASyD,eA7EJ,CAAC,YAAa,WAAY,WAAY,UAAW,mBAgFhDb,KAAI,SAACc,GAAD,OACD,sBAAKnB,UAAU,UAAf,UACE,qBAAKA,UAAU,cAAf,SACI,6FAAgEmB,OAEtE,cAAC,IAAD,CAASC,KAAM,EAAGC,IAAK,EAAG7B,MAAOA,EAAO8B,KAAM,KAAMC,SAAUlC,EAAwB8B,GAAWK,aAAc,UAGvH,sBAAKxB,UAAU,cAAf,sBAAsC,cAAC,IAAD,CAAQe,KAAK,UAAUC,QAvHtD,WACjBhD,GAAc,GACdF,EAAkB,CAAC,WAAa,EAAG,UAAY,EAAG,UAAY,EAAG,SAAW,EAAG,mBAAmB,IAClGG,KAoHgD,sCCjJrCwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3E,SAAS4E,eAAe,SAM1BZ,K","file":"static/js/main.0ab6f41c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Slider, { Range } from 'rc-slider';\nimport Highlightable from 'highlightable';\nimport jsonData from './data/dialogsumdata.json';\nimport 'rc-slider/assets/index.css';\nimport fs from \"fs\";\nimport { Button } from 'antd';\nimport './App.css';\n\nfunction App() {\n  let [document, setDocument] = useState({})\n  let [dialogueLines, setDialogueLines] = useState([])\n  let [criteriaScores, setCriteriaScores] = useState({'Coherence':-1, 'Accuracy':-1, 'Coverage':-1, 'Concise':-1, 'Overall Quality':-1})\n  let [annotating, setAnnotating] = useState(true)\n\n  let showSummary = () => {\n    setAnnotating(false)\n  }\n\n\n\n  const getDocument = async () => {\n    let texts = JSON.parse(JSON.stringify(jsonData))\n    let text = texts[Math.floor(Math.random() * texts.length)]\n    // text = texts[0]  \n    let lines = text.dialogue.split(\"\\n\")\n    let expandedLines = []\n    lines.forEach(line => {\n      expandedLines.push([line])\n    });\n    setDocument(text);\n    setDialogueLines(expandedLines)\n   };\n\n  useEffect(() => {\n     getDocument();\n   }, []);\n\n  let handleSubmit = () => {\n    setAnnotating(true)\n    setCriteriaScores({'Coherence':-1, 'Accuracy':-1, 'Coverage':-1, 'Concise':-1, 'Overall Quality':-1})\n    getDocument()\n  }\n\n  let callbackSetCoherence = (value) => {\n    let currScores = criteriaScores\n    currScores['Coherence'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetAccuracy = (value) => {\n    let currScores = criteriaScores\n    currScores['Accuracy'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetCoverage = (value) => {\n    let currScores = criteriaScores\n    currScores['Coverage'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetConcise = (value) => {\n    let currScores = criteriaScores\n    currScores['Concise'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetOverall = (value) => {\n    let currScores = criteriaScores\n    currScores['Overall Quality'] = value\n    setCriteriaScores(currScores)\n  }\n  let criterias = ['Coherence', 'Accuracy', 'Coverage', 'Concise', 'Overall Quality']\n  let criteriaChangeFunctions = {'Coherence':callbackSetCoherence, 'Accuracy':callbackSetAccuracy, 'Coverage':callbackSetCoverage, 'Concise':callbackSetConcise, 'Overall Quality':callbackSetOverall}\n  \n  let marks= {\n\n      \"-2\": ' A mostly better',\n      \"-1\": 'A partially better',\n      0: 'both  equal',\n      1: 'B partially better',\n      2: 'B mostly better'\n  };\n\n\n  \n  let onMouseOverHighlightedWordCallback = (range) => {}\n  let onTextHighlightedCallback = (range) => {  \n    let newDialogueLines = []\n    dialogueLines.forEach(line => {\n      if (line[0]==range.data.text) {\n        line.push(range)\n      }\n      newDialogueLines.push(line)\n    });\n    setDialogueLines(newDialogueLines)\n  }\n  console.log(document)\n  \n  return (\n    <div className=\"App\">\n      <div>\n        <h2>Please Highlight the Dialogue below!</h2>\n        <h4>Please do not highlight more that one line together:</h4>\n      </div>\n      {\n        dialogueLines ? \n        <>\n        { Array.from({length: dialogueLines.length}, (_, i) => i + 1).map((num) =>(\n          <div className=\"RubricText\"> \n          {dialogueLines[num]? \n           <Highlightable \n          //  ranges={}\n           ranges={dialogueLines[num].slice(1,dialogueLines[num].length)}\n            enabled={annotating}\n            onTextHighlighted={onTextHighlightedCallback}\n            id={1}\n            onMouseOverHighlightedWord={onMouseOverHighlightedWordCallback}\n            highlightStyle={{\n              backgroundColor: '#ffcc80'\n            }}\n            text={dialogueLines[num][0] || \"\"}\n   />\n          : <></>}\n          </div>\n        ) ) }\n        </> : <></>\n      }\n\n      {\n        annotating ? <div>\n              <div>\n                Click Below once you are done annotating\n              </div>\n            <Button type=\"primary\" onClick={showSummary} >Done Annotation</Button>\n        </div>: <></>\n      }\n   \n      {annotating ?  <></>:\n        \n        <div className=\"finalbutton\"> \n        <div className=\"Summaries\" >\n          <div className=\"SummaryVal\">\n            <div><h2>Summary A</h2></div>\n            \n            {document.summary1}\n            </div>\n          <div>\n          <div className=\"SummaryVal\"><h2>Summary B</h2></div>\n            {document.summary2}\n            </div>\n        </div>\n        {criterias.map((criteria) => (\n                      <div className=\"ratings\">\n                        <div className=\"ratingstext\">\n                            <h3>Please compare the two above summaries in regards to their {criteria}</h3>\n                        </div>\n                      <Slider  min={-2} max={2} marks={marks} step={null} onChange={criteriaChangeFunctions[criteria]} defaultValue={0} />\n                      </div>\n              ))}\n              <div className=\"finalbutton\">         <Button type=\"primary\" onClick={handleSubmit} >Submit Results</Button>\n </div>\n\n      </div>\n      }\n      \n        {/* <Slider  min={1} marks={marks('Coherence')} step={null} onChange={criteriaChangeFunctions['Coherence']} defaultValue={-1} /> */} \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}