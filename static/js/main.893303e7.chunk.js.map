{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["db","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getFirestore","App","useState","document","setDocument","dialogueLines","setDialogueLines","criteriaScores","setCriteriaScores","annotating","setAnnotating","setSalientInfo","color","useEffect","console","log","getSummaries","a","getDocs","collection","forEach","doc","getDocument","texts","JSON","parse","stringify","jsonData","text","Math","floor","random","length","lines","dialogue","split","expandedLines","line","push","handleSubmit","summaryRef","fname","summaries","j","summary","toString","salientInfo","i","intervals","slice","sort","b","start","newintervals","end","max","vals","val","data","setDoc","merge","addDoc","scores","Coherence","Accuracy","Coverage","Concise","criteriaChangeFunctions","value","currScores","marks","onMouseOverHighlightedWordCallback","range","onTextHighlightedCallback","newDialogueLines","highlightStyle","backgroundColor","className","map","ranges","enabled","onTextHighlighted","id","onMouseOverHighlightedWord","type","onClick","summary1","summary2","criteria","min","step","onChange","defaultValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"++inBA6BaA,GAHDC,YAXW,CACrBC,OAAQ,0CACRC,WAAY,4CACZC,UAAW,4BACXC,cAAe,wCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAOCC,e,0BC+RHC,MA5Sf,WACE,MAA8BC,mBAAS,IAAvC,mBAAKC,EAAL,KAAeC,EAAf,KACA,EAAwCF,mBAAS,IAAjD,mBAAKG,EAAL,KAAoBC,EAApB,KACA,EAA0CJ,mBAAS,CAAC,WAAa,EAAG,UAAY,EAAG,UAAY,EAAG,SAAW,EAAG,mBAAmB,IAAnI,mBAAKK,EAAL,KAAqBC,EAArB,KACA,EAAkCN,oBAAS,GAA3C,mBAAKO,EAAL,KAAiBC,EAAjB,KACA,EAAoCR,mBAAS,IAA7C,mBAAkBS,GAAlB,WACA,EAAwBT,mBAAS,WAAjC,mBAAKU,EAAL,UAQAC,qBAAU,WACRC,QAAQC,IAAI,UAEZ,IAAMC,EAAY,uCAAG,sBAAAC,EAAA,sEACSC,YAAQC,YAAW5B,EAAI,cADhC,cAGL6B,SAAQ,SAACC,OAHJ,2CAAH,qDAQlBL,MACC,IAKH,IAAMM,EAAW,uCAAG,kCAAAL,EAAA,sDACdM,EAAQC,KAAKC,MAAMD,KAAKE,UAAUC,IAClCC,EAAOL,EAAMM,KAAKC,MAAMD,KAAKE,SAAWR,EAAMS,SAE9CC,EAAQL,EAAKM,SAASC,MAAM,MAC5BC,EAAgB,GACpBH,EAAMb,SAAQ,SAAAiB,GACZD,EAAcE,KAAK,CAACD,OAEtBvB,QAAQC,IAAIa,GACZd,QAAQC,IAAIqB,GACZhC,EAAYwB,GACZtB,EAAiB8B,GAZC,2CAAH,qDAejBvB,qBAAU,WACPS,MACC,IAEJ,IAAIiB,EAAY,uCAAG,kDAAAtB,EAAA,sDAMjB,IAJMuB,EAAanB,YAAI9B,EAAI,YAAaY,EAASsC,OAG7CC,EAAY,GACPC,EAAI,EAAGA,EAAI,EAAGA,KACfC,EAAUzC,EAAS,WAAWwC,EAAE,GAAGE,cAErCH,EAAUJ,KAAKM,GAIrB,IADIE,EAAc,GACTC,EAAI,EAAGA,EAAI1C,EAAc2B,OAAQe,IAAK,CAQ7C,IANAC,GADIA,EAAY3C,EAAc0C,GAAGE,MAAM,IACjBC,MAAK,SAASjC,EAAGkC,GACrC,OAAIlC,EAAEmC,MAAQD,EAAEC,OAAe,EAC3BnC,EAAEmC,MAAQD,EAAEC,MAAc,EACvB,KAELC,EAAe,GACVV,EAAI,EAAGA,EAAGK,EAAUhB,OAAQW,IACV,GAArBU,EAAarB,OAEfqB,EAAaf,KAAKU,EAAUL,IAGxBK,EAAUL,GAAGS,OAASC,EAAaA,EAAarB,OAAO,GAAGsB,IAC5DD,EAAaA,EAAarB,OAAO,GAAGsB,IAAMzB,KAAK0B,IAAKF,EAAaA,EAAarB,OAAO,GAAGsB,IAAKN,EAAUL,GAAGW,KAE1GD,EAAaf,KAAKU,EAAUL,IAOhC,IAHIa,EAAO,GAGFb,EAAI,EAAGA,EAAGU,EAAarB,OAAQW,IAClCc,EAAMJ,EAAaV,GAAGe,KAAK9B,KAAKqB,MAAMI,EAAaV,GAAGS,MAAOC,EAAaV,GAAGW,IAAM,GACvFxC,QAAQC,IAAI0C,GACZD,EAAKlB,KAAKmB,GAEK,GAAbD,EAAKxB,QACPc,EAAYR,KAAKkB,GA3CN,gBAiDTG,YAAOnB,EAAY,CACzBN,SAAU/B,EAAS+B,SACnBO,MAAOtC,EAASsC,MAChBG,QAASF,GACR,CAAEkB,OAAO,IArDK,uBAuDIC,YAAO1C,YAAW5B,EAAI,aAAc,CACvDuD,YAAaA,EACbgB,OAAQ,CACNC,UAAWxD,EAAc,UACzByD,SAAUzD,EAAc,SACxB0D,SAAU1D,EAAc,SACxB2D,QAAS3D,EAAc,QACvB,kBAAmBA,EAAe,oBAEpCqC,QAAUJ,IAhEK,cAsEjB9B,GAAc,GACdF,EAAkB,CAAC,WAAa,EAAG,UAAY,EAAG,UAAY,EAAG,SAAW,EAAG,mBAAmB,IAClGc,IACAX,EAAe,IAzEE,4CAAH,qDAuGZwD,EAA0B,CAAC,UA3BJ,SAACC,GAC1B,IAAIC,EAAa9D,EACjB8D,EAAU,UAAgBD,EAC1BtD,QAAQC,IAAIV,GACZG,EAAkB6D,IAuB6C,SArBvC,SAACD,GACzB,IAAIC,EAAa9D,EACjB8D,EAAU,SAAeD,EACzB5D,EAAkB6D,IAkB6E,SAhBvE,SAACD,GACzB,IAAIC,EAAa9D,EACjB8D,EAAU,SAAeD,EACzB5D,EAAkB6D,IAa6G,QAXxG,SAACD,GACxB,IAAIC,EAAa9D,EACjB8D,EAAU,QAAcD,EACxB5D,EAAkB6D,IAQ2I,kBANtI,SAACD,GACxB,IAAIC,EAAa9D,EACjB8D,EAAW,mBAAqBD,EAChC5D,EAAkB6D,KAKhBC,EAAO,CACP,KAAM,mBACN,KAAM,qBACN,EAAG,cACH,EAAG,qBACH,EAAG,mBAyCHC,EAAqC,SAACC,KACtCC,EAA4B,SAACD,GAE/B,IAAIE,EAAmB,GACvBrE,EAAce,SAAQ,SAAAiB,GAChBA,EAAK,IAAImC,EAAMd,KAAK9B,OACtB4C,EAAMd,KAAKiB,eAAgB,CACzBC,gBAAiBhE,GAGnByB,EAAKC,KAAKkC,IAEZE,EAAiBpC,KAAKD,MAExB/B,EAAiBoE,IAInB,OACE,sBAAKG,UAAU,MAAf,UACE,gCACE,sEACA,yFAGAxE,EACA,qBAAKwE,UAAU,YAAf,SACE,qBAAKA,UAAU,aAAf,SACAxE,EAAcyE,KAAI,SAACzC,GAAD,OAClB,qBAAKwC,UAAU,aAAf,SACCxC,EACA,cAAC,IAAD,CAEC0C,OAAQ1C,EAAKY,MAAM,EAAEZ,EAAKL,QAC1BgD,QAASvE,EACTwE,kBAAmBR,EACnBS,GAAI,EACJC,2BAA4BZ,EAC5BI,eAAgB,CACdC,gBAAiBhE,GAGnBgB,KAAMS,EAAK,IAAM,KAEjB,sCAUF,6BAIF5B,EAAa,gCACP,2EAGF,cAAC,IAAD,CAAQ2E,KAAK,UAAUC,QA9Pf,WAChB3E,GAAc,IA6PN,gCACI,6BAGTD,EAAc,6BAEb,sBAAKoE,UAAU,cAAf,UACA,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,8BAAK,6CAEJ1E,EAASmF,YAEZ,gCACA,qBAAKT,UAAU,aAAf,SAA4B,6CACzB1E,EAASoF,eA9HJ,CAAC,YAAa,WAAY,WAAY,UAAW,mBAiIhDT,KAAI,SAACU,GAAD,OACD,sBAAKX,UAAU,UAAf,UACE,qBAAKA,UAAU,cAAf,SACI,6FAAgEW,OAEtE,cAAC,IAAD,CAASC,KAAM,EAAGlC,IAAK,EAAGe,MAAOA,EAAOoB,KAAM,KAAMC,SAAUxB,EAAwBqB,GAAWI,aAAc,UAGvH,sBAAKf,UAAU,cAAf,sBAAsC,cAAC,IAAD,CAAQO,KAAK,UAAUC,QAAS9C,EAAhC,sCCrSrCsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrG,SAASsG,eAAe,SAM1BZ,M","file":"static/js/main.893303e7.chunk.js","sourcesContent":["// import { initializeApp } from \"firebase/app\";\n// import { getAnalytics } from \"firebase/analytics\";\n// const admin = require('firexbase-admin');\n// import firestore from \"./firestore\";\n// import \"firebase/firestore\"\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\n// import jsonData from './data/dialogsumtest.json';\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBn8UlIrBqZzILxUlFRofc0k-3U1p6c80Y\",\n  authDomain: \"dialogue-summary-platform.firebaseapp.com\",\n  projectId: \"dialogue-summary-platform\",\n  storageBucket: \"dialogue-summary-platform.appspot.com\",\n  messagingSenderId: \"876002399014\",\n  appId: \"1:876002399014:web:1195c8d72605fa0c7467e7\",\n  measurementId: \"G-QDNY7RFRTS\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n// const analytics = getAnalytics(app);\n\nexport const db = getFirestore();\n\n\n// async function s() {\n//     const querySnapshot = await getDocs(collection(db, \"summaries\"));\n//     querySnapshot.forEach((doc) => {\n//         console.log(`${doc.id} => ${doc.data()}`);\n//     });\n// }\n// s()\n// async function s2() {\n\n\n//     let texts = JSON.parse(JSON.stringify(jsonData))\n\n//     for (let i = 0; i < texts.length; i++) {\n\n//         for (let j = 0; j < 3; j++) {\n//             if (texts[i][\"summary\"+j.toString()]) {\n//                 console.log(texts[i][\"summary\"+j.toString()])\n//             }\n            \n//         }\n//     }\n// }\n// s2()\n\n// admin.initializeApp();\n\n// export const db = admin.firestore();","import React, { useState, useEffect } from 'react';\nimport Slider, { Range } from 'rc-slider';\nimport Tooltip from 'rc-tooltip';\nimport Highlightable from 'highlightable';\nimport jsonData from './data/dialogsumdata.json';\n// import RaisedButton  from 'material-ui/RaisedButton';\nimport getMuiTheme from 'material-ui/styles/getMuiTheme';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport 'rc-slider/assets/index.css';\nimport fs from \"fs\";\nimport { db } from './firebase'; // add\nimport { collection, getDocs, doc, setDoc, getDoc, addDoc  } from 'firebase/firestore';\n// import { } from \"firebase/firestore\"; \nimport { Button } from 'antd';\nimport './App.css';\n\nfunction App() {\n  let [document, setDocument] = useState({})\n  let [dialogueLines, setDialogueLines] = useState([])\n  let [criteriaScores, setCriteriaScores] = useState({'Coherence':-1, 'Accuracy':-1, 'Coverage':-1, 'Concise':-1, 'Overall Quality':-1})\n  let [annotating, setAnnotating] = useState(true)\n  let [salientInfo, setSalientInfo] = useState([])\n  let [color, setColor] = useState('#ffcc80')\n  // '#ffcc80'\n\n  let showSummary = () => {\n    setAnnotating(false)\n  }\n\n\n  useEffect(() => {\n    console.log('effect');\n    // const snapshot = db.collection('summaries').get()\n    const getSummaries = async () => {\n      const querySnapshot = await getDocs(collection(db, \"summaries\"));\n      // console.log(querySnapshot)\n      querySnapshot.forEach((doc) => {\n        // console.log(`${doc.id} => ${doc.data()}`);\n    });\n\n    }\n    getSummaries()\n  }, []);\n\n\n\n\n  const getDocument = async () => {\n    let texts = JSON.parse(JSON.stringify(jsonData))\n    let text = texts[Math.floor(Math.random() * texts.length)]\n    // text = texts[0]  \n    let lines = text.dialogue.split(\"\\n\")\n    let expandedLines = []\n    lines.forEach(line => {\n      expandedLines.push([line])\n    });\n    console.log(text)\n    console.log(expandedLines)\n    setDocument(text);\n    setDialogueLines(expandedLines)\n   };\n\n  useEffect(() => {\n     getDocument();\n   }, []);\n\n  let handleSubmit = async () => {\n\n    const summaryRef = doc(db, 'summaries', document.fname);\n    // console.log(summaryRef.get())\n\n    let summaries = []\n    for (let j = 0; j < 3; j++) {\n        let summary = document[\"summary\"+(j+1).toString()]\n        if (summary) {\n          summaries.push(summary)\n        }\n    }\n    let salientInfo = []\n    for (let i = 0; i < dialogueLines.length; i++) {\n      let intervals = dialogueLines[i].slice(1)\n      intervals = intervals.sort(function(a, b) {\n        if (a.start < b.start) return -1;\n        if (a.start > b.start) return 1;\n        return 0;\n      });\n      let newintervals = []\n      for (let j = 0; j <intervals.length; j++) {\n        if (newintervals.length==0) {\n          // console.log(intervals[j])\n          newintervals.push(intervals[j])\n          // console.log(newintervals)\n        } else {\n          if (intervals[j].start <= newintervals[newintervals.length-1].end) {\n            newintervals[newintervals.length-1].end = Math.max( newintervals[newintervals.length-1].end, intervals[j].end)\n          } else {\n            newintervals.push(intervals[j])\n          }\n        }\n      }\n        let vals = []\n        // console.log(intervals)\n        // console.log(newintervals)\n        for (let j = 0; j <newintervals.length; j++) {\n          let val = newintervals[j].data.text.slice(newintervals[j].start, newintervals[j].end + 1)\n          console.log(val)\n          vals.push(val)\n        }\n        if (vals.length!=0) {\n          salientInfo.push(vals)\n        }\n      }\n      // console.log(salientInfo)\n    \n\n      await setDoc(summaryRef, {\n      dialogue: document.dialogue,\n      fname: document.fname,\n      summary: summaries\n    }, { merge: true });\n\n    const docRef = await addDoc(collection(db, \"responses\"), {\n      salientInfo: salientInfo,\n      scores: {\n        Coherence: criteriaScores['Coherence'],\n        Accuracy: criteriaScores['Accuracy'],\n        Coverage: criteriaScores['Coverage'],\n        Concise: criteriaScores['Concise'],\n        \"Overall Quality\": criteriaScores['Overall Quality']\n      },\n      summary:  summaryRef\n    });\n\n \n\n\n    setAnnotating(true)\n    setCriteriaScores({'Coherence':-1, 'Accuracy':-1, 'Coverage':-1, 'Concise':-1, 'Overall Quality':-1})\n    getDocument()\n    setSalientInfo([])\n  }\n\n  let callbackSetCoherence = (value) => {\n    let currScores = criteriaScores\n    currScores['Coherence'] = value\n    console.log(dialogueLines)\n    setCriteriaScores(currScores)\n  }\n  let callbackSetAccuracy = (value) => {\n    let currScores = criteriaScores\n    currScores['Accuracy'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetCoverage = (value) => {\n    let currScores = criteriaScores\n    currScores['Coverage'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetConcise = (value) => {\n    let currScores = criteriaScores\n    currScores['Concise'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetOverall = (value) => {\n    let currScores = criteriaScores\n    currScores['Overall Quality'] = value\n    setCriteriaScores(currScores)\n  }\n  let criterias = ['Coherence', 'Accuracy', 'Coverage', 'Concise', 'Overall Quality']\n  let criteriaChangeFunctions = {'Coherence':callbackSetCoherence, 'Accuracy':callbackSetAccuracy, 'Coverage':callbackSetCoverage, 'Concise':callbackSetConcise, 'Overall Quality':callbackSetOverall}\n  \n  let marks= {\n      \"-2\": ' A mostly better',\n      \"-1\": 'A partially better',\n      0: 'both  equal',\n      1: 'B partially better',\n      2: 'B mostly better'\n  };\n\n  function customRenderer(currentRenderedNodes, currentRenderedRange, currentRenderedIndex, onMouseOverHighlightedWord) {\n    return tooltipRenderer(currentRenderedNodes, currentRenderedRange, currentRenderedIndex, onMouseOverHighlightedWord);\n  }\n\n  function tooltipRenderer(lettersNode, range, rangeIndex, onMouseOverHighlightedWord) {\n    console.log(range.data.id, rangeIndex)\n    return (<Tooltip key={`${range.data.id}-${rangeIndex}`} onVisibleChange={onMouseOverHighlightedWord}\n                        placement=\"top\"\n                        overlay={<button type=\"primary\" onClick={() => resetHightlight(range)} >Reset Highlight</button>}\n                        defaultVisible={true}\n                        animation=\"zoom\">\n        <span>{lettersNode}</span>\n    </Tooltip>);\n  }\n\n  function resetHightlight(range) {\n    console.log(range)\n    for (let i = 0; i < dialogueLines.length; i++) {\n      console.log(dialogueLines[i])\n      console.log('jflk')\n      const index = dialogueLines[i].indexOf(range);\n      if (index > -1) {\n        dialogueLines[i].splice(index, 1);\n      }\n      // console.log(dialogueLines[i])\n      // if (dialogueLines[i].includes(range) ){\n\n      // }\n\n      for (let j = 1; j < dialogueLines[i]-1; j++) {\n        salientInfo.push(dialogueLines[i][j].text)\n      }\n    }\n\n  }\n\n\n\n  let onMouseOverHighlightedWordCallback = (range) => {}\n  let onTextHighlightedCallback = (range) => {  \n\n    let newDialogueLines = []\n    dialogueLines.forEach(line => {\n      if (line[0]==range.data.text) {\n        range.data.highlightStyle ={\n          backgroundColor: color\n        }\n\n        line.push(range)\n      }\n      newDialogueLines.push(line)\n    });\n    setDialogueLines(newDialogueLines)\n  }\n  // console.log(document)\n  \n  return (\n    <div className=\"App\">\n      <div>\n        <h2>Please Highlight the Dialogue below!</h2>\n        <h4>Please do not highlight more that one line together:</h4>\n      </div>\n      {\n        dialogueLines ? \n        <div className='Summaries'>\n          <div className=\"SummaryVal\">\n        { dialogueLines.map((line) =>(\n          <div className=\"RubricText\"> \n          {line? \n           <Highlightable \n          //  ranges={}\n            ranges={line.slice(1,line.length)}\n            enabled={annotating}\n            onTextHighlighted={onTextHighlightedCallback}\n            id={1}\n            onMouseOverHighlightedWord={onMouseOverHighlightedWordCallback}\n            highlightStyle={{\n              backgroundColor: color\n            }}\n            // rangeRenderer={customRenderer}\n            text={line[0] || \"\"}\n          />\n          : <></>}\n          </div>\n        ) ) }\n        </div>\n        {/* <div className=\"SummaryVal\">\n          <Button type=\"primary\" onClick={() => setColor('#ff0000')} >Change Highlight color to red</Button>\n          <Button type=\"primary\" onClick={() => setColor('#ffcc80')} >Change Highlight color to yellow</Button>\n          <Button type=\"primary\" onClick={() => setColor('#0000ff')} >Change Highlight color to blue</Button>\n        </div> */}\n        </div> \n        : <></>\n      }\n\n      {\n        annotating ? <div>\n              <div>\n                Click Below once you are done annotating\n              </div>\n            <Button type=\"primary\" onClick={showSummary} >Done Annotation</Button>\n        </div>: <></>\n      }\n   \n      {annotating ?  <></>:\n        \n        <div className=\"finalbutton\"> \n        <div className=\"Summaries\" >\n          <div className=\"SummaryVal\">\n            <div><h2>Summary A</h2></div>\n            \n            {document.summary1}\n            </div>\n          <div>\n          <div className=\"SummaryVal\"><h2>Summary B</h2></div>\n            {document.summary2}\n            </div>\n        </div>\n        {criterias.map((criteria) => (\n                      <div className=\"ratings\">\n                        <div className=\"ratingstext\">\n                            <h3>Please compare the two above summaries in regards to their {criteria}</h3>\n                        </div>\n                      <Slider  min={-2} max={2} marks={marks} step={null} onChange={criteriaChangeFunctions[criteria]} defaultValue={0} />\n                      </div>\n              ))}\n              <div className=\"finalbutton\">         <Button type=\"primary\" onClick={handleSubmit} >Submit Results</Button>\n </div>\n\n      </div>\n      }\n      \n        {/* <Slider  min={1} marks={marks('Coherence')} step={null} onChange={criteriaChangeFunctions['Coherence']} defaultValue={-1} /> */} \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}