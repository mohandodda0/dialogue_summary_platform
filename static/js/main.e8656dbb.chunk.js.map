{"version":3,"sources":["firebase.js","components/Rate.js","components/Welcome.js","components/Info.js","App.js","reportWebVitals.js","index.js"],"names":["db","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getFirestore","Rate","useState","document","setDocument","dialogueLines","setDialogueLines","criteriaScores","setCriteriaScores","annotating","setAnnotating","setSalientInfo","color","rangeList","setRangeList","location","useLocation","history","useHistory","console","log","state","name","push","useEffect","getSummaries","a","getDocs","collection","forEach","doc","getDocument","texts","JSON","parse","stringify","jsonData","text","Math","floor","random","length","lines","dialogue","split","expandedLines","line","handleSubmit","summaryRef","fname","summaries","j","summary","toString","salientInfo","i","intervals","slice","sort","b","start","newintervals","end","max","vals","val","data","setDoc","merge","addDoc","scores","Coherence","Accuracy","Coverage","Concise","criteriaChangeFunctions","value","currScores","marks","onMouseOverHighlightedWordCallback","range","onTextHighlightedCallback","newDialogueLines","highlightStyle","backgroundColor","className","map","ranges","enabled","onTextHighlighted","id","onMouseOverHighlightedWord","type","onClick","index","newdialogline","undefined","idx","indexOf","undoHighlight","summary1","summary2","criteria","min","step","onChange","defaultValue","Welcome","labelCol","span","wrapperCol","initialValues","remember","onFinish","pathname","autoComplete","Item","label","rules","required","message","style","maxWidth","offset","htmlType","Info","to","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8656dbb.chunk.js","sourcesContent":["// import { initializeApp } from \"firebase/app\";\n// import { getAnalytics } from \"firebase/analytics\";\n// const admin = require('firexbase-admin');\n// import firestore from \"./firestore\";\n// import \"firebase/firestore\"\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\n// import jsonData from './data/dialogsumtest.json';\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBn8UlIrBqZzILxUlFRofc0k-3U1p6c80Y\",\n  authDomain: \"dialogue-summary-platform.firebaseapp.com\",\n  projectId: \"dialogue-summary-platform\",\n  storageBucket: \"dialogue-summary-platform.appspot.com\",\n  messagingSenderId: \"876002399014\",\n  appId: \"1:876002399014:web:1195c8d72605fa0c7467e7\",\n  measurementId: \"G-QDNY7RFRTS\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n// const analytics = getAnalytics(app);\n\nexport const db = getFirestore();\n\n\n// async function s() {\n//     const querySnapshot = await getDocs(collection(db, \"summaries\"));\n//     querySnapshot.forEach((doc) => {\n//         console.log(`${doc.id} => ${doc.data()}`);\n//     });\n// }\n// s()\n// async function s2() {\n\n\n//     let texts = JSON.parse(JSON.stringify(jsonData))\n\n//     for (let i = 0; i < texts.length; i++) {\n\n//         for (let j = 0; j < 3; j++) {\n//             if (texts[i][\"summary\"+j.toString()]) {\n//                 console.log(texts[i][\"summary\"+j.toString()])\n//             }\n            \n//         }\n//     }\n// }\n// s2()\n\n// admin.initializeApp();\n\n// export const db = admin.firestore();","import React, { useState, useEffect } from 'react';\nimport Slider, { Range } from 'rc-slider';\nimport Tooltip from 'rc-tooltip';\nimport Highlightable from 'highlightable';\nimport jsonData from '../data/dialogsumdata.json';\nimport getMuiTheme from 'material-ui/styles/getMuiTheme';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport 'rc-slider/assets/index.css';\nimport fs from \"fs\";\nimport { db } from '../firebase'; // add\nimport { collection, getDocs, doc, setDoc, getDoc, addDoc  } from 'firebase/firestore';\n// import { } from \"firebase/firestore\"; \nimport { Button } from 'antd';\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport '../App.css';\n\nfunction Rate() {\n  let [document, setDocument] = useState({})\n  let [dialogueLines, setDialogueLines] = useState([])\n  let [criteriaScores, setCriteriaScores] = useState({'Coherence':0, 'Accuracy':0, 'Coverage':0, 'Concise':0, 'Overall Quality':0})\n  let [annotating, setAnnotating] = useState(true)\n  let [salientInfo, setSalientInfo] = useState([])\n  // let [highlightsLeft, setHighlightsLeft] = useState({'Salient Information':  })\n  let [color, setColor] = useState('#ffcc80')\n  let [rangeList, setRangeList] = useState([])\n  const location = useLocation();\n  let history = useHistory();\n  console.log(location)\n  if (!location.state || !location.state.name || location.state.name==\"\") {\n    console.log('no name!!!1')\n    history.push(\"/\")\n  }\n  \n  // '#ffcc80'\n\n\n  useEffect(() => {\n    if (!location.state || !location.state.name || location.state.name==\"\") {\n      console.log('no name!!!1')\n      history.push(\"/\")\n    }\n    console.log('effect');\n    // const snapshot = db.collection('summaries').get()\n    const getSummaries = async () => {\n      const querySnapshot = await getDocs(collection(db, \"summaries\"));\n      // console.log(querySnapshot)\n      querySnapshot.forEach((doc) => {\n        // console.log(`${doc.id} => ${doc.data()}`);\n    });\n    }\n    getSummaries()\n  }, []);\n\n\n\n\n  const getDocument = async () => {\n    let texts = JSON.parse(JSON.stringify(jsonData))\n    let text = texts[Math.floor(Math.random() * texts.length)]\n    // text = texts[0]  \n    let lines = text.dialogue.split(\"\\n\")\n    let expandedLines = []\n    lines.forEach(line => {\n      expandedLines.push([line])\n    });\n    console.log(text)\n    console.log(expandedLines)\n    setDocument(text);\n    setDialogueLines(expandedLines)\n    setRangeList([])\n    setSalientInfo([])\n   };\n\n  useEffect(() => {\n     getDocument();\n   }, []);\n\n  let handleSubmit = async () => {\n\n    const summaryRef = doc(db, 'summaries', document.fname);\n    let summaries = []\n    for (let j = 0; j < 3; j++) {\n        let summary = document[\"summary\"+(j+1).toString()]\n        if (summary) {\n          summaries.push(summary)\n        }\n    }\n    let salientInfo = []\n    for (let i = 0; i < dialogueLines.length; i++) {\n      let intervals = dialogueLines[i].slice(1)\n      intervals = intervals.sort(function(a, b) {\n        if (a.start < b.start) return -1;\n        if (a.start > b.start) return 1;\n        return 0;\n      });\n      let newintervals = []\n      for (let j = 0; j <intervals.length; j++) {\n        if (newintervals.length==0) {\n          // console.log(intervals[j])\n          newintervals.push(intervals[j])\n          // console.log(newintervals)\n        } else {\n          if (intervals[j].start <= newintervals[newintervals.length-1].end) {\n            newintervals[newintervals.length-1].end = Math.max( newintervals[newintervals.length-1].end, intervals[j].end)\n          } else {\n            newintervals.push(intervals[j])\n          }\n        }\n      }\n        let vals = []\n        // console.log(intervals)\n        // console.log(newintervals)\n        for (let j = 0; j <newintervals.length; j++) {\n          let val = newintervals[j].data.text.slice(newintervals[j].start, newintervals[j].end + 1)\n          console.log(val)\n          vals.push(val)\n        }\n        if (vals.length!=0) {\n          salientInfo.push(vals)\n        }\n      }\n      // console.log(salientInfo)\n\n\n      await setDoc(summaryRef, {\n      dialogue: document.dialogue,\n      fname: document.fname,\n      summary: summaries\n    }, { merge: true });\n\n    const docRef = await addDoc(collection(db, \"responses\"), {\n      salientInfo: salientInfo,\n      scores: {\n        Coherence: criteriaScores['Coherence'],\n        Accuracy: criteriaScores['Accuracy'],\n        Coverage: criteriaScores['Coverage'],\n        Concise: criteriaScores['Concise'],\n        \"Overall Quality\": criteriaScores['Overall Quality']\n      },\n      summary:  summaryRef,\n      name: location.state.name\n    });\n\n \n\n\n    setAnnotating(true)\n    setCriteriaScores({'Coherence':-1, 'Accuracy':-1, 'Coverage':-1, 'Concise':-1, 'Overall Quality':-1})\n    getDocument()\n  }\n\n  let callbackSetCoherence = (value) => {\n    let currScores = criteriaScores\n    currScores['Coherence'] = value\n    console.log(dialogueLines)\n    setCriteriaScores(currScores)\n  }\n  let callbackSetAccuracy = (value) => {\n    let currScores = criteriaScores\n    currScores['Accuracy'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetCoverage = (value) => {\n    let currScores = criteriaScores\n    currScores['Coverage'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetConcise = (value) => {\n    let currScores = criteriaScores\n    currScores['Concise'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetOverall = (value) => {\n    console.log(criteriaScores)\n    let currScores = criteriaScores\n    currScores['Overall Quality'] = value\n    setCriteriaScores(currScores)\n  }\n  let criterias = ['Coherence', 'Accuracy', 'Coverage', 'Concise', 'Overall Quality']\n  let criteriaChangeFunctions = {'Coherence':callbackSetCoherence, 'Accuracy':callbackSetAccuracy, 'Coverage':callbackSetCoverage, 'Concise':callbackSetConcise, 'Overall Quality':callbackSetOverall}\n  \n  let marks= {\n      \"-2\": ' A mostly better',\n      \"-1\": 'A partially better',\n      0: 'both  equal',\n      1: 'B partially better',\n      2: 'B mostly better'\n  };\n\n  function customRenderer(currentRenderedNodes, currentRenderedRange, currentRenderedIndex, onMouseOverHighlightedWord) {\n    return tooltipRenderer(currentRenderedNodes, currentRenderedRange, currentRenderedIndex, onMouseOverHighlightedWord);\n  }\n\n  function tooltipRenderer(lettersNode, range, rangeIndex, onMouseOverHighlightedWord) {\n    console.log(range.data.id, rangeIndex)\n    return (<Tooltip key={`${range.data.id}-${rangeIndex}`} onVisibleChange={onMouseOverHighlightedWord}\n                        placement=\"top\"\n                        overlay={<button type=\"primary\" onClick={() => resetHightlight(range)} >Reset Highlight</button>}\n                        defaultVisible={true}\n                        animation=\"zoom\">\n        <span>{lettersNode}</span>\n    </Tooltip>);\n  }\n\n  function resetHightlight(range) {\n    console.log(range)\n    for (let i = 0; i < dialogueLines.length; i++) {\n      console.log(dialogueLines[i])\n      console.log('jflk')\n      const index = dialogueLines[i].indexOf(range);\n      if (index > -1) {\n        dialogueLines[i].splice(index, 1);\n      }\n      for (let j = 1; j < dialogueLines[i]-1; j++) {\n        salientInfo.push(dialogueLines[i][j].text)\n      }\n    }\n\n  }\n\n\n  let undoHighlight = () => {\n    let newdialogline = undefined\n    let index\n    if (rangeList.length>0) {\n      for (let i = 0; i < dialogueLines.length; i++) {\n        let idx = dialogueLines[i].indexOf(rangeList[rangeList.length - 1])\n        console.log(idx, i, rangeList[-1])\n        if (idx>-1) {\n          newdialogline = [...dialogueLines[i].slice(0, idx), ...dialogueLines[i].slice(idx + 1)]\n          index = i\n        }\n      }\n      console.log(dialogueLines)\n      console.log(rangeList)\n      if (newdialogline) {\n        dialogueLines[index] = newdialogline\n        setRangeList(rangeList.slice(0, -1))\n        setDialogueLines(dialogueLines)\n      }\n\n    }\n\n  }\n\n  let onMouseOverHighlightedWordCallback = (range) => {}\n  let onTextHighlightedCallback = (range) => {  \n    let newDialogueLines = []\n    dialogueLines.forEach(line => {\n      if (line[0]==range.data.text) {\n        range.data.highlightStyle ={\n          backgroundColor: color\n        }\n\n        line.push(range)\n      }\n      newDialogueLines.push(line)\n    });\n    setDialogueLines(newDialogueLines)\n    setRangeList([...rangeList, range])\n  }\n  // console.log(document)\n  \n  return (\n    <div className=\"App\">\n      <div>\n        <h2>Please Highlight the Dialogue below!</h2>\n        <h4>Please do not highlight more that one line together:</h4>\n      </div>\n      {\n        dialogueLines ? \n        <div className='Summaries'>\n          <div className=\"SummaryVal\">\n        { dialogueLines.map((line) =>(\n          <div className=\"RubricText\"> \n          {line ? \n           <Highlightable \n          //  ranges={}\n            ranges={line.slice(1,line.length)}\n            enabled={annotating}\n            onTextHighlighted={onTextHighlightedCallback}\n            id={1}\n            onMouseOverHighlightedWord={onMouseOverHighlightedWordCallback}\n            highlightStyle = {{\n              backgroundColor: color\n            }}\n            text={line[0] || \"\"}\n          />\n          : <></>}\n          </div>\n        ) ) }\n        </div>\n        <div className=\"ColorButtons\">\n          <button type=\"primary\" onClick={() => undoHighlight(color)} > Undo Highlight </button>\n        </div>\n        </div> \n        : <></>\n      }\n\n      {\n        annotating ? <div>\n              <div>\n                Click Below once you are done annotating\n              </div>\n            <Button type=\"primary\" onClick={()=>setAnnotating(false)} >Done Annotation</Button>\n        </div>: <></>\n      }\n   \n      {annotating ?  <></>:\n        \n        <div className=\"finalbutton\"> \n        <div className=\"Summaries\" >\n          <div className=\"SummaryVal\">\n            <div><h2>Summary A</h2></div>\n            \n            {document.summary1}\n            </div>\n          <div>\n          <div className=\"SummaryVal\"><h2>Summary B</h2></div>\n            {document.summary2}\n            </div>\n        </div>\n        {criterias.map((criteria) => (\n                      <div className=\"ratings\">\n                        <div className=\"ratingstext\">\n                            <h3>Please compare the two above summaries in regards to their {criteria}</h3>\n                        </div>\n                      <Slider  min={-2} max={2} marks={marks} step={null} onChange={criteriaChangeFunctions[criteria]} defaultValue={0} />\n                      </div>\n              ))}\n              <div className=\"finalbutton\">         <Button type=\"primary\" onClick={handleSubmit} >Submit Results</Button>\n </div>\n\n      </div>\n      }\n      \n        {/* <Slider  min={1} marks={marks('Coherence')} step={null} onChange={criteriaChangeFunctions['Coherence']} defaultValue={-1} /> */} \n    </div>\n  );\n}\n\nexport default Rate;\n","import React, { useState, useEffect } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link, \n  useHistory,\n  useLocation\n} from \"react-router-dom\";\nimport '../App.css';\n\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\n// import './index.css';\nimport { Form, Input, Button, Checkbox } from 'antd';\n\n\nfunction Welcome() {\n  let history = useHistory()\n  let location = useLocation()\n  console.log(location)\n  let handleSubmit = (value) => {\n    console.log(value.name)\n    history.push({\n        pathname: '/rate',\n        state: { \n            name: value.name \n        },\n      });\n  }\n  return (\n    <div className=\"App\">\n        <h2>Welcome to SALT Lab Dialogue Grading Platform!</h2>\n        <p>Please click on the info link above to get instructions and information about the system. </p>\n        <p>To start grading, we need a unique identifer. This can be your full name, or a unique identity.</p>\n        <p>Every time you come back to use our platform, we need you to enter the the unique name/identity you put your first time you came to the website!</p>\n\n        <Form\n            name=\"basic\"\n            labelCol={{\n                span: 8,\n            }}\n            wrapperCol={{\n                span: 16,\n            }}\n            initialValues={{\n                remember: true,\n            }}\n            onFinish={handleSubmit}\n            // onFinishFailed={}\n            autoComplete=\"off\"\n            >\n            <Form.Item\n                label=\"Enter your full name or a unique identifier \"\n                name=\"name\"\n                rules={[\n                {\n                    required: true,\n                    message: 'Please enter your name',\n                },\n                ]}\n            >\n                <Input style={{ maxWidth: \"250px\" }}/>\n            </Form.Item>\n\n            <Form.Item\n                wrapperCol={{\n                offset: 8,\n                span: 16,\n                }}\n            >\n                <Button type=\"primary\" htmlType=\"submit\" >\n                Submit\n                </Button>\n            </Form.Item>\n            </Form>\n    </div>\n  );\n}\n\nexport default Welcome;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport '../App.css';\nimport { Button } from 'antd';\n\n\n\nfunction Info() {\n  return (\n    <div className=\"info\">\n        <div className=\"section\">\n            <h2>Goal</h2>\n            <h4>SALT lab is using this tool for help gather dialogue summarization labeled data to better develop data to generate better dialogue summaries!</h4>\n            <h4>For this we are looking at two directions: </h4>\n            <p>1 Give salient information of the document</p>\n            <p>2 Rate the summaries on 5 different aspects dialogue summary</p>\n\n        </div>\n        <div className=\"section\">\n            <h2>What is a good summary?</h2>\n            <p> Roughly speaking, a good summary is a shorter piece of text that has the essence of the original. </p>\n            <p>– tries to accomplish the same purpose and conveys the same information as the original post. </p>\n            <p> In our case this is we are looking for dialogue summaries so we want the summaries to make sense within the context of a conversation!</p>\n        </div>\n\n        <div className=\"section\">\n            <h2>How to grade salient information?</h2>\n            <p> In essence, we want you to highlight the important information of the document. </p>\n            <p>This information you highlight needs to be that of which would be helpful in generating a summary.</p>\n            <ul>\n                <li>The information can be phrases, sentences, or a couple of words.</li>\n                <li>Speakers’ <b>intents</b> should be included, if they can be clearly identified.</li>\n                <li><b>Events/topics</b> in the conversation should be included, if they can be clearly identified</li>\n                <li>The highlighted information could include important <b>discourse relations, particularly causal relations</b></li>\n                <li>The highlighted information should include <b>important emotions</b> related to events in the summary if there are any.</li>\n            </ul>\n            <p>We want a minimum of 3 higlights and a maximum of 8 highlights per dialogue</p>\n        </div>\n\n        <div className=\"section\">\n            <h2>Rate Summaries on different Criteria</h2>\n            <h4> After you have hilighted the salient information, we will give you 2 distinct summaries of the corresponding dialogue.</h4>\n            <h4> We will have you compare the two summaries in different dimensions:</h4>\n            <ol>\n                <li>Coherence: Easy to understand and free of English errors.</li>\n                <li>Accuracy: Information stated in the summary is accurate and has no incorrect information.</li>\n                    <ul>\n                        <li> It is not misleading</li>\n                        <li>Doesn’t have much minor errors </li>\n                    </ul>\n                <li>Coverage: Mentions main information of the conversation. Convey the most salient information of the dialogue</li>\n                <li>Concise: Summary is short and to the point. It doesn’t have too much fluff.  </li>\n                <li>Overall Quality: What is your personal preference by the definition of a summary.</li>\n            </ol>\n            <p>We want a minimum of 3 higlights and a maximum of 8 highlights per dialogue</p>\n        </div>\n         <Link to=\"/\">\n            <Button type=\"primary\" >\n                    Start Grading!\n            </Button>\n        </Link>\n\n    </div>\n  );\n}\n\nexport default Info;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  HashRouter\n} from \"react-router-dom\";\nimport './App.css';\nimport Rate from './components/Rate';\nimport Auth from './components/Auth';\nimport Welcome from './components/Welcome';\nimport Info from './components/Info';\n\n\nfunction App() {\n//   let [document, setDocument] = useState({})\n//   let [dialogueLines, setDialogueLines] = useState([])\n//   let [criteriaScores, setCriteriaScores] = useState({'Coherence':0, 'Accuracy':0, 'Coverage':0, 'Concise':0, 'Overall Quality':0})\n//   let [annotating, setAnnotating] = useState(true)\n//   let [salientInfo, setSalientInfo] = useState([])\n//   // let [highlightsLeft, setHighlightsLeft] = useState({'Salient Information':  })\n//   let [color, setColor] = useState('#ffcc80')\n//   let [rangeList, setRangeList] = useState([])\n//   // '#ffcc80'\n\n//   useEffect(() => {\n//     console.log('effect');\n//     // const snapshot = db.collection('summaries').get()\n//     const getSummaries = async () => {\n//       const querySnapshot = await getDocs(collection(db, \"summaries\"));\n//       // console.log(querySnapshot)\n//       querySnapshot.forEach((doc) => {\n//         // console.log(`${doc.id} => ${doc.data()}`);\n//     });\n//     }\n//     getSummaries()\n//   }, []);\n\n\n\n\n//   const getDocument = async () => {\n//     let texts = JSON.parse(JSON.stringify(jsonData))\n//     let text = texts[Math.floor(Math.random() * texts.length)]\n//     // text = texts[0]  \n//     let lines = text.dialogue.split(\"\\n\")\n//     let expandedLines = []\n//     lines.forEach(line => {\n//       expandedLines.push([line])\n//     });\n//     console.log(text)\n//     console.log(expandedLines)\n//     setDocument(text);\n//     setDialogueLines(expandedLines)\n//     setRangeList([])\n//     setSalientInfo([])\n//    };\n\n//   useEffect(() => {\n//      getDocument();\n//    }, []);\n\n//   let handleSubmit = async () => {\n\n\n\n//     const summaryRef = doc(db, 'summaries', document.fname);\n//     let summaries = []\n//     for (let j = 0; j < 3; j++) {\n//         let summary = document[\"summary\"+(j+1).toString()]\n//         if (summary) {\n//           summaries.push(summary)\n//         }\n//     }\n//     let salientInfo = []\n//     for (let i = 0; i < dialogueLines.length; i++) {\n//       let intervals = dialogueLines[i].slice(1)\n//       intervals = intervals.sort(function(a, b) {\n//         if (a.start < b.start) return -1;\n//         if (a.start > b.start) return 1;\n//         return 0;\n//       });\n//       let newintervals = []\n//       for (let j = 0; j <intervals.length; j++) {\n//         if (newintervals.length==0) {\n//           // console.log(intervals[j])\n//           newintervals.push(intervals[j])\n//           // console.log(newintervals)\n//         } else {\n//           if (intervals[j].start <= newintervals[newintervals.length-1].end) {\n//             newintervals[newintervals.length-1].end = Math.max( newintervals[newintervals.length-1].end, intervals[j].end)\n//           } else {\n//             newintervals.push(intervals[j])\n//           }\n//         }\n//       }\n//         let vals = []\n//         // console.log(intervals)\n//         // console.log(newintervals)\n//         for (let j = 0; j <newintervals.length; j++) {\n//           let val = newintervals[j].data.text.slice(newintervals[j].start, newintervals[j].end + 1)\n//           console.log(val)\n//           vals.push(val)\n//         }\n//         if (vals.length!=0) {\n//           salientInfo.push(vals)\n//         }\n//       }\n//       // console.log(salientInfo)\n\n\n//     //   await setDoc(summaryRef, {\n//     //   dialogue: document.dialogue,\n//     //   fname: document.fname,\n//     //   summary: summaries\n//     // }, { merge: true });\n\n//     // const docRef = await addDoc(collection(db, \"responses\"), {\n//     //   salientInfo: salientInfo,\n//     //   scores: {\n//     //     Coherence: criteriaScores['Coherence'],\n//     //     Accuracy: criteriaScores['Accuracy'],\n//     //     Coverage: criteriaScores['Coverage'],\n//     //     Concise: criteriaScores['Concise'],\n//     //     \"Overall Quality\": criteriaScores['Overall Quality']\n//     //   },\n//     //   summary:  summaryRef\n//     // });\n\n \n\n\n//     setAnnotating(true)\n//     setCriteriaScores({'Coherence':-1, 'Accuracy':-1, 'Coverage':-1, 'Concise':-1, 'Overall Quality':-1})\n//     getDocument()\n//   }\n\n//   let callbackSetCoherence = (value) => {\n//     let currScores = criteriaScores\n//     currScores['Coherence'] = value\n//     console.log(dialogueLines)\n//     setCriteriaScores(currScores)\n//   }\n//   let callbackSetAccuracy = (value) => {\n//     let currScores = criteriaScores\n//     currScores['Accuracy'] = value\n//     setCriteriaScores(currScores)\n//   }\n//   let callbackSetCoverage = (value) => {\n//     let currScores = criteriaScores\n//     currScores['Coverage'] = value\n//     setCriteriaScores(currScores)\n//   }\n//   let callbackSetConcise = (value) => {\n//     let currScores = criteriaScores\n//     currScores['Concise'] = value\n//     setCriteriaScores(currScores)\n//   }\n//   let callbackSetOverall = (value) => {\n//     console.log(criteriaScores)\n//     let currScores = criteriaScores\n//     currScores['Overall Quality'] = value\n//     setCriteriaScores(currScores)\n//   }\n//   let criterias = ['Coherence', 'Accuracy', 'Coverage', 'Concise', 'Overall Quality']\n//   let criteriaChangeFunctions = {'Coherence':callbackSetCoherence, 'Accuracy':callbackSetAccuracy, 'Coverage':callbackSetCoverage, 'Concise':callbackSetConcise, 'Overall Quality':callbackSetOverall}\n  \n//   let marks= {\n//       \"-2\": ' A mostly better',\n//       \"-1\": 'A partially better',\n//       0: 'both  equal',\n//       1: 'B partially better',\n//       2: 'B mostly better'\n//   };\n\n//   function customRenderer(currentRenderedNodes, currentRenderedRange, currentRenderedIndex, onMouseOverHighlightedWord) {\n//     return tooltipRenderer(currentRenderedNodes, currentRenderedRange, currentRenderedIndex, onMouseOverHighlightedWord);\n//   }\n\n//   function tooltipRenderer(lettersNode, range, rangeIndex, onMouseOverHighlightedWord) {\n//     console.log(range.data.id, rangeIndex)\n//     return (<Tooltip key={`${range.data.id}-${rangeIndex}`} onVisibleChange={onMouseOverHighlightedWord}\n//                         placement=\"top\"\n//                         overlay={<button type=\"primary\" onClick={() => resetHightlight(range)} >Reset Highlight</button>}\n//                         defaultVisible={true}\n//                         animation=\"zoom\">\n//         <span>{lettersNode}</span>\n//     </Tooltip>);\n//   }\n\n//   function resetHightlight(range) {\n//     console.log(range)\n//     for (let i = 0; i < dialogueLines.length; i++) {\n//       console.log(dialogueLines[i])\n//       console.log('jflk')\n//       const index = dialogueLines[i].indexOf(range);\n//       if (index > -1) {\n//         dialogueLines[i].splice(index, 1);\n//       }\n//       for (let j = 1; j < dialogueLines[i]-1; j++) {\n//         salientInfo.push(dialogueLines[i][j].text)\n//       }\n//     }\n\n//   }\n\n\n//   let undoHighlight = () => {\n//     let newdialogline = undefined\n//     let index\n//     if (rangeList.length>0) {\n//       for (let i = 0; i < dialogueLines.length; i++) {\n//         let idx = dialogueLines[i].indexOf(rangeList[rangeList.length - 1])\n//         console.log(idx, i, rangeList[-1])\n//         if (idx>-1) {\n//           newdialogline = [...dialogueLines[i].slice(0, idx), ...dialogueLines[i].slice(idx + 1)]\n//           index = i\n//         }\n//       }\n//       console.log(dialogueLines)\n//       console.log(rangeList)\n//       if (newdialogline) {\n//         dialogueLines[index] = newdialogline\n//         setRangeList(rangeList.slice(0, -1))\n//         setDialogueLines(dialogueLines)\n//       }\n\n//     }\n\n//   }\n\n//   let onMouseOverHighlightedWordCallback = (range) => {}\n//   let onTextHighlightedCallback = (range) => {  \n//     let newDialogueLines = []\n//     dialogueLines.forEach(line => {\n//       if (line[0]==range.data.text) {\n//         range.data.highlightStyle ={\n//           backgroundColor: color\n//         }\n\n//         line.push(range)\n//       }\n//       newDialogueLines.push(line)\n//     });\n//     setDialogueLines(newDialogueLines)\n//     setRangeList([...rangeList, range])\n//   }\n//   // console.log(document)\n  \n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <div>\n          <nav>\n            <Link to=\"/info\">Information about Grading </Link>\n          </nav>\n\n          <Switch>\n            <Route path=\"/info\">\n              <Info />\n            </Route>\n            <Route path=\"/rate\">\n              <Rate />\n            </Route>\n            <Route path=\"/\">\n              <Welcome />\n            </Route>\n          </Switch>\n        </div>\n      </HashRouter>\n      {/* <div>\n        <h2>Please Highlight the Dialogue below!</h2>\n        <h4>Please do not highlight more that one line together:</h4>\n      </div>\n      {\n        dialogueLines ? \n        <div className='Summaries'>\n          <div className=\"SummaryVal\">\n        { dialogueLines.map((line) =>(\n          <div className=\"RubricText\"> \n          {line ? \n           <Highlightable \n          //  ranges={}\n            ranges={line.slice(1,line.length)}\n            enabled={annotating}\n            onTextHighlighted={onTextHighlightedCallback}\n            id={1}\n            onMouseOverHighlightedWord={onMouseOverHighlightedWordCallback}\n            highlightStyle = {{\n              backgroundColor: color\n            }}\n            text={line[0] || \"\"}\n          />\n          : <></>}\n          </div>\n        ) ) }\n        </div>\n        <div className=\"ColorButtons\">\n          <button type=\"primary\" onClick={() => undoHighlight(color)} > Undo Highlight </button>\n        </div>\n        </div> \n        : <></>\n      }\n\n      {\n        annotating ? <div>\n              <div>\n                Click Below once you are done annotating\n              </div>\n            <Button type=\"primary\" onClick={()=>setAnnotating(false)} >Done Annotation</Button>\n        </div>: <></>\n      }\n   \n      {annotating ?  <></>:\n        \n        <div className=\"finalbutton\"> \n        <div className=\"Summaries\" >\n          <div className=\"SummaryVal\">\n            <div><h2>Summary A</h2></div>\n            \n            {document.summary1}\n            </div>\n          <div>\n          <div className=\"SummaryVal\"><h2>Summary B</h2></div>\n            {document.summary2}\n            </div>\n        </div>\n        {criterias.map((criteria) => (\n                      <div className=\"ratings\">\n                        <div className=\"ratingstext\">\n                            <h3>Please compare the two above summaries in regards to their {criteria}</h3>\n                        </div>\n                      <Slider  min={-2} max={2} marks={marks} step={null} onChange={criteriaChangeFunctions[criteria]} defaultValue={0} />\n                      </div>\n              ))}\n              <div className=\"finalbutton\">         <Button type=\"primary\" onClick={handleSubmit} >Submit Results</Button>\n </div>\n\n      </div>\n      } */}\n      \n        {/* <Slider  min={1} marks={marks('Coherence')} step={null} onChange={criteriaChangeFunctions['Coherence']} defaultValue={-1} /> */} \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}