{"version":3,"sources":["firebase.js","components/Rate.js","components/Welcome.js","components/Info.js","components/PrevRated.js","App.js","reportWebVitals.js","index.js"],"names":["db","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getFirestore","Rate","useState","document","setDocument","dialogueLines","setDialogueLines","criteriaScores","setCriteriaScores","annotating","setAnnotating","color","rangeList","setRangeList","name","setName","history","useLocation","useHistory","console","log","localStorage","getItem","useEffect","push","getDocument","a","texts","JSON","parse","stringify","jsonData","text","Math","floor","random","length","lines","dialogue","split","expandedLines","forEach","line","handleSubmit","summaryRef","doc","fname","summaries","j","summary","toString","salientInfo","salientInfoAll","i","intervals","slice","sort","b","start","newintervals","lineno","end","max","vals","vals2","val","data","setDoc","merge","addDoc","collection","scores","Coherence","Accuracy","Coverage","Concise","criteriaChangeFunctions","value","currScores","marks","onMouseOverHighlightedWordCallback","range","onTextHighlightedCallback","newDialogueLines","highlightStyle","backgroundColor","className","map","ranges","enabled","onTextHighlighted","id","onMouseOverHighlightedWord","type","onClick","index","newdialogline","undefined","idx","indexOf","undoHighlight","summary1","summary2","criteria","min","step","onChange","defaultValue","Welcome","props","location","labelCol","span","wrapperCol","initialValues","remember","onFinish","setItem","setNameSet","pathname","state","autoComplete","Item","label","rules","required","message","style","maxWidth","offset","htmlType","Info","to","PrevRated","allData","setAllData","allSummaries","setAllSummaries","allDialogueLines","setAllDialogueLines","page","setPage","getDocuments","stateQuery","query","where","getDocs","querySnapshot","d","dialogueLinesAll","smmrys","getDoc","docSnap","smmrydata","salientInfoAllOne","reverse","pop","disabled","simple","defaultCurrent","total","pageSize","App","nameSet","e","mode","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eaa0f2f0.chunk.js","sourcesContent":["// import { initializeApp } from \"firebase/app\";\n// import { getAnalytics } from \"firebase/analytics\";\n// const admin = require('firexbase-admin');\n// import firestore from \"./firestore\";\n// import \"firebase/firestore\"\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\n// import jsonData from './data/dialogsumtest.json';\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBn8UlIrBqZzILxUlFRofc0k-3U1p6c80Y\",\n  authDomain: \"dialogue-summary-platform.firebaseapp.com\",\n  projectId: \"dialogue-summary-platform\",\n  storageBucket: \"dialogue-summary-platform.appspot.com\",\n  messagingSenderId: \"876002399014\",\n  appId: \"1:876002399014:web:1195c8d72605fa0c7467e7\",\n  measurementId: \"G-QDNY7RFRTS\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n// const analytics = getAnalytics(app);\n\nexport const db = getFirestore();\n\n\n// async function s() {\n//     const querySnapshot = await getDocs(collection(db, \"summaries\"));\n//     querySnapshot.forEach((doc) => {\n//         console.log(`${doc.id} => ${doc.data()}`);\n//     });\n// }\n// s()\n// async function s2() {\n\n\n//     let texts = JSON.parse(JSON.stringify(jsonData))\n\n//     for (let i = 0; i < texts.length; i++) {\n\n//         for (let j = 0; j < 3; j++) {\n//             if (texts[i][\"summary\"+j.toString()]) {\n//                 console.log(texts[i][\"summary\"+j.toString()])\n//             }\n            \n//         }\n//     }\n// }\n// s2()\n\n// admin.initializeApp();\n\n// export const db = admin.firestore();","import React, { useState, useEffect } from 'react';\nimport Slider, { Range } from 'rc-slider';\nimport Tooltip from 'rc-tooltip';\nimport Highlightable from 'highlightable';\nimport jsonData from '../data/dialogsumdata.json';\nimport getMuiTheme from 'material-ui/styles/getMuiTheme';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport 'rc-slider/assets/index.css';\nimport fs from \"fs\";\nimport { db } from '../firebase'; // add\nimport { collection, getDocs, doc, setDoc, getDoc, addDoc  } from 'firebase/firestore';\n// import { } from \"firebase/firestore\"; \nimport { Button } from 'antd';\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport '../App.css';\n\nfunction Rate() {\n  let [document, setDocument] = useState({})\n  let [dialogueLines, setDialogueLines] = useState([])\n  let [criteriaScores, setCriteriaScores] = useState({'Coherence':0, 'Accuracy':0, 'Coverage':0, 'Concise':0, 'Overall Quality':0})\n  let [annotating, setAnnotating] = useState(true)\n  // let [highlightsLeft, setHighlightsLeft] = useState({'Salient Information':  })\n  let [color, setColor] = useState('#ffcc80')\n  let [rangeList, setRangeList] = useState([])\n  let [name, setName] = useState(\"\")\n  const location = useLocation();\n  let history = useHistory();\n  console.log(localStorage.getItem('name'))\n  // if (!location.state || !location.state.name || location.state.name==\"\") {\n  //   console.log('no name!!!1')\n  //   history.push(\"/\")\n  // }\n  // if (localStorage.getItem('name') && localStorage.getItem('name')!=\"\") {\n  //   setName(localStorage.getItem('name'))\n  // } else {\n  //   console.log('no name!!!1')\n  //   history.push(\"/\")\n  // }\n  \n  // '#ffcc80'\n\n\n  useEffect(() => {\n    // if (!location.state || !location.state.name || location.state.name==\"\") {\n    //   console.log('no name!!!1')\n    //   history.push(\"/\")\n    // }\n\n    if (localStorage.getItem('name') && localStorage.getItem('name')!=\"\") {\n      setName(localStorage.getItem('name'))\n    } else {\n      console.log('no name!!!1')\n      history.push(\"/\")\n    }\n\n  }, []);\n\n  const getDocument = async () => {\n    let texts = JSON.parse(JSON.stringify(jsonData))\n    let text = texts[Math.floor(Math.random() * texts.length)]\n    // text = texts[0]  \n    let lines = text.dialogue.split(\"\\n\")\n    let expandedLines = []\n    lines.forEach(line => {\n      expandedLines.push([line])\n    });\n    // console.log(text)\n    // console.log(expandedLines)\n    setDocument(text);\n    setDialogueLines(expandedLines)\n    setRangeList([])\n   };\n\n  useEffect(() => {\n     getDocument();\n   }, []);\n\n  let handleSubmit = async () => {\n    const summaryRef = doc(db, 'summaries', document.fname);\n    let summaries = []\n    for (let j = 0; j < 3; j++) {\n        let summary = document[\"summary\"+(j+1).toString()]\n        if (summary) {\n          summaries.push(summary)\n        }\n    }\n    let salientInfo = []\n    let salientInfoAll = []\n    for (let i = 0; i < dialogueLines.length; i++) {\n      let intervals = dialogueLines[i].slice(1)\n      intervals = intervals.sort(function(a, b) {\n        if (a.start < b.start) return -1;\n        if (a.start > b.start) return 1;\n        return 0;\n      });\n      let newintervals = []\n      for (let j = 0; j <intervals.length; j++) {\n        if (newintervals.length==0) {\n          newintervals.push({\n            ...intervals[j],\n            lineno: i\n          })\n        } else {\n          if (intervals[j].start <= newintervals[newintervals.length-1].end) {\n            newintervals[newintervals.length-1].end = Math.max( newintervals[newintervals.length-1].end, intervals[j].end)\n          } else {\n            // newintervals.push(intervals[j])\n            newintervals.push({\n              ...intervals[j],\n              lineno: i\n            })\n          }\n        }\n      }\n        let vals = []\n        let vals2 = []\n        for (let j = 0; j <newintervals.length; j++) {\n          let val = newintervals[j].data.text.slice(newintervals[j].start, newintervals[j].end + 1)\n          // console.log(val)\n          vals.push(val)\n          delete newintervals[j]['data'];\n          vals2.push(newintervals[j])\n        }\n        if (vals.length!=0) {\n          salientInfo = [...salientInfo, ...vals]\n          salientInfoAll = [...salientInfoAll, ...vals2]\n        }\n      }\n      // console.log(salientInfo)\n\n\n      await setDoc(summaryRef, {\n      dialogue: document.dialogue,\n      fname: document.fname,\n      summary: summaries\n    }, { merge: true });\n    console.log(salientInfo)\n    console.log(salientInfoAll)\n    const docRef = await addDoc(collection(db, \"responses\"), {\n      salientInfo: salientInfo,\n      salientInfoAll: salientInfoAll,\n      scores: {\n        Coherence: criteriaScores['Coherence'],\n        Accuracy: criteriaScores['Accuracy'],\n        Coverage: criteriaScores['Coverage'],\n        Concise: criteriaScores['Concise'],\n        \"Overall Quality\": criteriaScores['Overall Quality']\n      },\n      summary:  summaryRef,\n      name: name\n    });\n\n \n\n\n    setAnnotating(true)\n    setCriteriaScores({'Coherence':-1, 'Accuracy':-1, 'Coverage':-1, 'Concise':-1, 'Overall Quality':-1})\n    getDocument()\n  }\n\n  let callbackSetCoherence = (value) => {\n    let currScores = criteriaScores\n    currScores['Coherence'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetAccuracy = (value) => {\n    let currScores = criteriaScores\n    currScores['Accuracy'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetCoverage = (value) => {\n    let currScores = criteriaScores\n    currScores['Coverage'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetConcise = (value) => {\n    let currScores = criteriaScores\n    currScores['Concise'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetOverall = (value) => {\n    let currScores = criteriaScores\n    currScores['Overall Quality'] = value\n    setCriteriaScores(currScores)\n  }\n  let criterias = ['Coherence', 'Accuracy', 'Coverage', 'Concise', 'Overall Quality']\n  let criteriaChangeFunctions = {'Coherence':callbackSetCoherence, 'Accuracy':callbackSetAccuracy, 'Coverage':callbackSetCoverage, 'Concise':callbackSetConcise, 'Overall Quality':callbackSetOverall}\n  \n  let marks= {\n      \"-2\": ' A mostly better',\n      \"-1\": 'A partially better',\n      0: 'both  equal',\n      1: 'B partially better',\n      2: 'B mostly better'\n  };\n\n\n  let undoHighlight = () => {\n    let newdialogline = undefined\n    let index\n    if (rangeList.length>0) {\n      for (let i = 0; i < dialogueLines.length; i++) {\n        let idx = dialogueLines[i].indexOf(rangeList[rangeList.length - 1])\n        // console.log(idx, i, rangeList[-1])\n        if (idx>-1) {\n          newdialogline = [...dialogueLines[i].slice(0, idx), ...dialogueLines[i].slice(idx + 1)]\n          index = i\n        }\n      }\n\n      if (newdialogline) {\n        dialogueLines[index] = newdialogline\n        setRangeList(rangeList.slice(0, -1))\n        setDialogueLines(dialogueLines)\n      }\n\n    }\n\n  }\n\n  let onMouseOverHighlightedWordCallback = (range) => {}\n  let onTextHighlightedCallback = (range) => {  \n    let newDialogueLines = []\n    dialogueLines.forEach(line => {\n      if (line[0]==range.data.text) {\n        range.data.highlightStyle ={\n          backgroundColor: color\n        }\n\n        line.push(range)\n      }\n      newDialogueLines.push(line)\n    });\n    setDialogueLines(newDialogueLines)\n    setRangeList([...rangeList, range])\n  }\n  // console.log(document)\n  \n  return (\n    <div className=\"Rate\">\n      <div>\n        <h2>Hello {name}! Please Highlight the Dialogue below!</h2>\n        <h4>Please do not highlight more that one line together:</h4>\n      </div>\n      {\n        dialogueLines ? \n        <div className='Summaries'>\n          <div className=\"SummaryVal\">\n        { dialogueLines.map((line) =>(\n          <div className=\"RubricText\"> \n          {line ? \n           <Highlightable \n          //  ranges={}\n            ranges={line.slice(1,line.length)}\n            enabled={annotating}\n            onTextHighlighted={onTextHighlightedCallback}\n            id={1}\n            onMouseOverHighlightedWord={onMouseOverHighlightedWordCallback}\n            highlightStyle = {{\n              backgroundColor: color\n            }}\n            text={line[0] || \"\"}\n          />\n          : <></>}\n          </div>\n        ) ) }\n        </div>\n        <div className=\"ColorButtons\">\n          <button type=\"primary\" onClick={() => undoHighlight(color)} > Undo Highlight </button>\n        </div>\n        </div> \n        : <></>\n      }\n\n      {\n        annotating ? <div>\n              <div>\n                Click Below once you are done annotating\n              </div>\n            <Button type=\"primary\" onClick={()=>setAnnotating(false)} >Done Annotation</Button>\n        </div>: <></>\n      }\n   \n      {annotating ?  <></>:\n        \n        <div className=\"finalbutton\"> \n        <div className=\"Summaries\" >\n          <div className=\"SummaryVal\">\n            <div><h2>Summary A</h2></div>\n              {document.summary1}\n            </div>\n          \n          <div className=\"SummaryVal\">\n            <div><h2>Summary B</h2></div>\n              {document.summary2}\n            </div>\n        </div>\n        {criterias.map((criteria) => (\n                      <div className=\"ratings\">\n                        <div className=\"ratingstext\">\n                            <h3>Please compare the two above summaries in regards to their {criteria}</h3>\n                        </div>\n                      <Slider  min={-2} max={2} marks={marks} step={null} onChange={criteriaChangeFunctions[criteria]} defaultValue={0} />\n                      </div>\n              ))}\n              <div className=\"finalbutton\">         <Button type=\"primary\" onClick={handleSubmit} >Submit Results</Button>\n </div>\n      </div>\n      }\n        {/* <Slider  min={1} marks={marks('Coherence')} step={null} onChange={criteriaChangeFunctions['Coherence']} defaultValue={-1} /> */} \n    </div>\n  );\n}\n\nexport default Rate;\n","import React, { useState, useEffect } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link, \n  useHistory,\n  useLocation\n} from \"react-router-dom\";\nimport '../App.css';\n\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\n// import './index.css';\n\nimport { Form, Input, Button, Checkbox } from 'antd';\n\n\nfunction Welcome(props) {\n  let history = useHistory()\n  let location = useLocation()\n  console.log(location)\n  let handleSubmit = (value) => {\n    localStorage.setItem('name', value.name)\n    props.setNameSet(true)\n    history.push({\n        pathname: '/rate',\n        state: { \n            name: value.name \n        },\n      });\n  }\n  return (\n    <div className=\"App\">\n        <h2>Welcome to SALT Lab Dialogue Grading Platform!</h2>\n        <p>Please click on the info link above to get instructions and information about the system. </p>\n        <p>To start grading, we need a unique identifer. This can be your full name, or a unique identity.</p>\n        <p>If you join on a different browser/device you will need to put this unique identifier!</p>\n\n        <Form\n            name=\"basic\"\n            labelCol={{\n                span: 8,\n            }}\n            wrapperCol={{\n                span: 16,\n            }}\n            initialValues={{\n                remember: true,\n            }}\n            onFinish={handleSubmit}\n            // onFinishFailed={}\n            autoComplete=\"off\"\n            >\n            <Form.Item\n                label=\"Enter your full name or a unique identifier \"\n                name=\"name\"\n                rules={[\n                {\n                    required: true,\n                    message: 'Please enter your name',\n                },\n                ]}\n            >\n                <Input style={{ maxWidth: \"250px\" }}/>\n            </Form.Item>\n\n            <Form.Item\n                wrapperCol={{\n                offset: 8,\n                span: 16,\n                }}\n            >\n                <Button type=\"primary\" htmlType=\"submit\" >\n                Submit\n                </Button>\n            </Form.Item>\n            </Form>\n    </div>\n  );\n}\n\nexport default Welcome;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport '../App.css';\nimport { Button } from 'antd';\n\n\n\nfunction Info() {\n  return (\n    <div className=\"info\">\n        <div className=\"section\">\n            <h2>Goal</h2>\n            <h4>SALT lab is using this tool for help gather dialogue summarization labeled data to better develop data to generate better dialogue summaries!</h4>\n            <h4>For this we are looking at two directions: </h4>\n            <p>1 Give salient information of the document</p>\n            <p>2 Rate the summaries on 5 different aspects dialogue summary</p>\n\n        </div>\n        <div className=\"section\">\n            <h2>What is a Good Summary?</h2>\n            <p> Roughly speaking, a good summary is a shorter piece of text that has the essence of the original. </p>\n            <p>– tries to accomplish the same purpose and conveys the same information as the original post. </p>\n            <p> In our case this is we are looking for dialogue summaries so we want the summaries to make sense within the context of a conversation!</p>\n        </div>\n\n        <div className=\"section\">\n            <h2>How to grade Salient Information?</h2>\n            <p> In essence, we want you to highlight the important information of the document. </p>\n            <p>This information you highlight needs to be that of which would be helpful in generating a summary.</p>\n            <ul>\n                <li>The information can be phrases, sentences, or a couple of words.</li>\n                <li>Speakers’ <b>intents</b> should be included, if they can be clearly identified.</li>\n                <li><b>Events/topics</b> in the conversation should be included, if they can be clearly identified</li>\n                <li>The highlighted information could include important <b>discourse relations, particularly causal relations</b></li>\n                <li>The highlighted information should include <b>important emotions</b> related to events in the summary if there are any.</li>\n            </ul>\n            <p>We want a minimum of 3 higlights and a maximum of 8 highlights per dialogue</p>\n        </div>\n\n        <div className=\"section\">\n            <h2>Rate Summaries on Different Criteria</h2>\n            <h4> After you have hilighted the salient information, we will give you 2 distinct summaries of the corresponding dialogue.</h4>\n            <h4> We will have you compare the two summaries in different dimensions:</h4>\n            <ol>\n                <li>Coherence: Easy to understand and free of English errors.</li>\n                <li>Accuracy: Information stated in the summary is accurate and has no incorrect information.</li>\n                    <ul>\n                        <li> It is not misleading</li>\n                        <li>Doesn’t have much minor errors </li>\n                    </ul>\n                <li>Coverage: Mentions main information of the conversation. Convey the most salient information of the dialogue</li>\n                <li>Concise: Summary is short and to the point. It doesn’t have too much fluff.  </li>\n                <li>Overall Quality: What is your personal preference by the definition of a summary.</li>\n            </ol>\n            <p>We want a minimum of 3 higlights and a maximum of 8 highlights per dialogue</p>\n        </div>\n         <Link to=\"/\">\n            <Button type=\"primary\" >\n                    Start Grading!\n            </Button>\n        </Link>\n\n    </div>\n  );\n}\n\nexport default Info;\n","import React, { useState, useEffect } from 'react';\nimport Slider, { Range } from 'rc-slider';\nimport Tooltip from 'rc-tooltip';\nimport Highlightable from 'highlightable';\nimport jsonData from '../data/dialogsumdata.json';\nimport getMuiTheme from 'material-ui/styles/getMuiTheme';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport 'rc-slider/assets/index.css';\nimport fs from \"fs\";\nimport { db } from '../firebase'; // add\nimport { collection, getDocs, doc, setDoc, getDoc, where, query  } from 'firebase/firestore';\n// import { } from \"firebase/firestore\"; \nimport { Pagination } from 'antd';\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport '../App.css';\n\nfunction PrevRated() {\n  let [document, setDocument] = useState({})\n  let [dialogueLines, setDialogueLines] = useState([])\n  let [criteriaScores, setCriteriaScores] = useState({'Coherence':0, 'Accuracy':0, 'Coverage':0, 'Concise':0, 'Overall Quality':0})\n  let [annotating, setAnnotating] = useState(true)\n  // let [highlightsLeft, setHighlightsLeft] = useState({'Salient Information':  })\n  let [color, setColor] = useState('#ffcc80')\n  let [rangeList, setRangeList] = useState([])\n  const location = useLocation();\n  let history = useHistory();\n  let [name, setName] = useState(\"\")\n  let [allData, setAllData] = useState([])\n  let [allSummaries, setAllSummaries] = useState([])\n  let [allDialogueLines, setAllDialogueLines] = useState([])\n  let [page, setPage] = useState(1)\n\n  \n  const getDocuments = async () => {\n    const stateQuery = query(collection(db, \"responses\"), where(\"name\", \"==\", localStorage.getItem('name')));\n    const querySnapshot = await getDocs(stateQuery);\n    // console.log(querySnapshot)\n    let d = []\n    querySnapshot.forEach((doc) => {\n        // console.log(doc.data())\n        // console.log(doc.data().salientInfoAll)\n        // doc.data() is never undefined for query doc snapshots\n        d.push(doc.data())\n      });\n    console.log('lasty', d)\n    setAllData(d)\n    let dialogueLinesAll = []\n    let smmrys = []\n    for (let i = 0; i < d.length; i++) {\n      const docSnap = await getDoc(d[i].summary);\n      let smmrydata = docSnap.data()\n      if (smmrydata) {\n        smmrys.push(smmrydata.summary)\n        let dialogueLines = []\n        let salientInfoAllOne = [...d[i].salientInfoAll].reverse()\n        let lines = smmrydata.dialogue.split(\"\\n\")\n        for (let j = 0; j < lines.length; j++) {\n          let line = [lines[j]]\n          // dialogueLines.push(lines[j])\n          while (salientInfoAllOne.length > 0 && salientInfoAllOne[salientInfoAllOne.length-1].lineno==j) {\n            line.push(salientInfoAllOne.pop())\n          }\n          dialogueLines.push(line)\n        }\n        dialogueLinesAll.push(dialogueLines)\n      }\n    }\n    setAllDialogueLines(dialogueLinesAll)\n    setAllSummaries(smmrys)\n    // console.log('ehrererere')\n    // console.log(d, smmrys, dialogueLinesAll)\n    // console.log(d)\n    // console.log(smmrys)\n    // console.log(dialogueLinesAll.length)\n    // console.log(dialogueLinesAll[0])\n   };\n\n\n  useEffect(() => {\n    if (localStorage.getItem('name') && localStorage.getItem('name')!=\"\") {\n        setName(localStorage.getItem('name'))\n      } else {\n        console.log('no name!!!1')\n        history.push(\"/\")\n      }\n      getDocuments()\n  }, []);\n\n  let criterias = ['Coherence', 'Accuracy', 'Coverage', 'Concise', 'Overall Quality']\n//   let criteriaChangeFunctions = {'Coherence':callbackSetCoherence, 'Accuracy':callbackSetAccuracy, 'Coverage':callbackSetCoverage, 'Concise':callbackSetConcise, 'Overall Quality':callbackSetOverall}\n  \n  let marks= {\n      \"-2\": ' A mostly better',\n      \"-1\": 'A partially better',\n      0: 'both  equal',\n      1: 'B partially better',\n      2: 'B mostly better'\n  };\n\n  let onMouseOverHighlightedWordCallback = (range) => {}\n  let onTextHighlightedCallback = (range) => {  \n    let newDialogueLines = []\n    dialogueLines.forEach(line => {\n      if (line[0]==range.data.text) {\n        range.data.highlightStyle ={\n          backgroundColor: color\n        }\n\n        line.push(range)\n      }\n      newDialogueLines.push(line)\n    });\n    setDialogueLines(newDialogueLines)\n    setRangeList([...rangeList, range])\n  }\n  \n  let onChange = (value) => {\n    setPage(value)\n  }\n  \n  return (\n    <div className=\"Rate\">\n      <div>\n        <h2>{name}'s Previously Rated Dialogue</h2>\n        <h3>Your Results for Particular Dialogue</h3>\n        </div>\n        \n        { (allData && allData.length!=0 && allSummaries && allSummaries.length!=0 && allDialogueLines && allDialogueLines.length!=0) ? <> \n        <h4>Your Highlighted Salient Information</h4>\n      {\n        allDialogueLines[page-1] ? \n        <div className='Summaries'>\n          <div className=\"SummaryVal\">\n        { allDialogueLines[page-1].map((line) =>(\n          <div className=\"RubricText\"> \n          {line ? \n           <Highlightable \n          //  ranges={}\n            ranges={line.slice(1,line.length)}\n            enabled={false}\n            onTextHighlighted={onTextHighlightedCallback}\n            id={1}\n            onMouseOverHighlightedWord={onMouseOverHighlightedWordCallback}\n            highlightStyle = {{\n              backgroundColor: color\n            }}\n            text={line[0] || \"\"}\n          />\n          : <></>}\n          </div>\n        ) ) }\n        </div>\n        </div> \n        : <></>\n      }\n        <div className=\"finalbutton\"> \n         {  (allSummaries && allSummaries[0] && allSummaries[0].length>1)  ? \n        <div className=\"Summaries\" >\n          <div className=\"SummaryVal\">\n            <div><h2>Summary A</h2></div>\n            {allSummaries[page-1][0]}\n            </div>\n          <div className=\"SummaryVal\"><div><h2>Summary B</h2></div>\n            {allSummaries[page-1][1]}\n            </div>\n        </div>\n        : <></>}  \n        {criterias.map((criteria) => (\n                      <div className=\"ratings\">\n                        <div className=\"ratingstext\">\n                            <h3> You gave {criteria} a score of this   {allData[page-1].scores[criteria]}  </h3>\n                        </div>\n                      <Slider  min={-2} max={2} marks={marks} step={null}  value={allData[page-1].scores[criteria] || 0} disabled={true}/>\n                      </div>\n              ))}\n      </div>\n\n      <Pagination simple onChange={onChange} defaultCurrent={1} total={allDialogueLines.length} pageSize={1} />\n\n\n        </>:<></>}\n\n    </div>\n  );\n}\n\nexport default PrevRated;\n","import React, { useState, useEffect } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  HashRouter\n} from \"react-router-dom\";\nimport './App.css';\nimport Rate from './components/Rate';\nimport Welcome from './components/Welcome';\nimport Info from './components/Info';\nimport PrevRated from './components/PrevRated';\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { Menu } from 'antd';\n\n\nfunction App() {\n  let [nameSet, setNameSet] = useState(false)\n\n\n  // let location = useLocation()\n\n  let handleClick = e => {\n    console.log('click ', e);\n    // this.setState({ current: e.key });\n    // console.log(location.pathname.replace(\"/\", \"\"))\n  };\n\n\n  useEffect(() => {\n    if (localStorage.getItem(\"name\")) {\n      setNameSet(true)\n    }\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <div>\n          <nav>\n          <Menu onClick={handleClick}   mode=\"horizontal\">\n            <Menu.Item key=\"welcome\"><Link to=\"/\"> Set Name </Link></Menu.Item>\n            <Menu.Item key=\"rate\" disabled={!nameSet}><Link to=\"/rate\"> Rate Summaries </Link></Menu.Item>\n            <Menu.Item key=\"info\"><Link to=\"/info\">Information about Grading </Link></Menu.Item>\n            <Menu.Item key=\"prevrated\" disabled={!nameSet}><Link to=\"/prevrated\">Previously Rated</Link></Menu.Item>\n            {/* <SubMenu title=\"SubMenu\">\n              <Menu.Item>SubMenuItem</Menu.Item>\n            </SubMenu> */}\n          </Menu>\n          </nav>\n\n          <Switch>\n            <Route path=\"/info\">\n              <Info />\n            </Route>\n            <Route path=\"/rate\">\n              <Rate />\n            </Route>\n            <Route path=\"/prevrated\">\n              <PrevRated />\n            </Route>\n            <Route path=\"/\">\n              <Welcome setNameSet={setNameSet}/>\n            </Route>\n          </Switch>\n        </div>\n      </HashRouter>      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}