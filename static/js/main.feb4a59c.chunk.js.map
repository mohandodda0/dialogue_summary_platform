{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["db","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getFirestore","App","useState","document","setDocument","dialogueLines","setDialogueLines","criteriaScores","setCriteriaScores","annotating","setAnnotating","useEffect","console","log","a","getDocs","collection","forEach","doc","getSummaries","getDocument","texts","JSON","parse","stringify","jsonData","text","Math","floor","random","length","j","toString","lines","dialogue","split","expandedLines","line","push","handleSubmit","summaryRef","fname","summaries","summary","salientInfo","i","addDoc","scores","Coherence","Accuracy","Coverage","Concise","setDoc","merge","criteriaChangeFunctions","value","currScores","marks","0","1","2","onMouseOverHighlightedWordCallback","range","onTextHighlightedCallback","newDialogueLines","data","className","Array","from","_","map","num","ranges","slice","enabled","onTextHighlighted","id","onMouseOverHighlightedWord","highlightStyle","backgroundColor","type","onClick","summary1","summary2","criteria","min","max","step","onChange","defaultValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.feb4a59c.chunk.js","sourcesContent":["// import { initializeApp } from \"firebase/app\";\n// import { getAnalytics } from \"firebase/analytics\";\n// const admin = require('firexbase-admin');\n// import firestore from \"./firestore\";\n// import \"firebase/firestore\"\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\n// import jsonData from './data/dialogsumtest.json';\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBn8UlIrBqZzILxUlFRofc0k-3U1p6c80Y\",\n  authDomain: \"dialogue-summary-platform.firebaseapp.com\",\n  projectId: \"dialogue-summary-platform\",\n  storageBucket: \"dialogue-summary-platform.appspot.com\",\n  messagingSenderId: \"876002399014\",\n  appId: \"1:876002399014:web:1195c8d72605fa0c7467e7\",\n  measurementId: \"G-QDNY7RFRTS\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n// const analytics = getAnalytics(app);\n\nexport const db = getFirestore();\n\n\n// async function s() {\n//     const querySnapshot = await getDocs(collection(db, \"summaries\"));\n//     querySnapshot.forEach((doc) => {\n//         console.log(`${doc.id} => ${doc.data()}`);\n//     });\n// }\n// s()\n// async function s2() {\n\n\n//     let texts = JSON.parse(JSON.stringify(jsonData))\n\n//     for (let i = 0; i < texts.length; i++) {\n\n//         for (let j = 0; j < 3; j++) {\n//             if (texts[i][\"summary\"+j.toString()]) {\n//                 console.log(texts[i][\"summary\"+j.toString()])\n//             }\n            \n//         }\n//     }\n// }\n// s2()\n\n// admin.initializeApp();\n\n// export const db = admin.firestore();","import React, { useState, useEffect } from 'react';\nimport Slider, { Range } from 'rc-slider';\nimport Highlightable from 'highlightable';\nimport jsonData from './data/dialogsumdata.json';\nimport 'rc-slider/assets/index.css';\nimport fs from \"fs\";\nimport { db } from './firebase'; // add\nimport { collection, getDocs, doc, setDoc, getDoc, addDoc  } from 'firebase/firestore';\n// import { } from \"firebase/firestore\"; \nimport { Button } from 'antd';\nimport './App.css';\n\nfunction App() {\n  let [document, setDocument] = useState({})\n  let [dialogueLines, setDialogueLines] = useState([])\n  let [criteriaScores, setCriteriaScores] = useState({'Coherence':-1, 'Accuracy':-1, 'Coverage':-1, 'Concise':-1, 'Overall Quality':-1})\n  let [annotating, setAnnotating] = useState(true)\n  let [salientInfo, setSalientInfo] = useState([])\n\n  let showSummary = () => {\n    setAnnotating(false)\n  }\n\n\n  useEffect(() => {\n\n    console.log('effect');\n    // const snapshot = db.collection('summaries').get()\n    const getSummaries = async () => {\n      const querySnapshot = await getDocs(collection(db, \"summaries\"));\n      // console.log(querySnapshot)\n      querySnapshot.forEach((doc) => {\n        // console.log(`${doc.id} => ${doc.data()}`);\n    });\n\n    }\n    // snapshot.forEach(doc => {\n    //   console.log(doc.id, '=>', doc.data());\n    // });\n    getSummaries()\n  }, []);\n\n\n\n\n  const getDocument = async () => {\n    let texts = JSON.parse(JSON.stringify(jsonData))\n    let text = texts[Math.floor(Math.random() * texts.length)]\n    let summaries = []\n    for (let j = 0; j < 3; j++) {\n        let summary = text[\"summary\"+(j+1).toString()]\n        if (text[\"summary\"+(j+1).toString()]) {\n          // console.log(text[\"summary\"+(j+1).toString()])\n        }\n    }\n\n    // text = texts[0]  \n    let lines = text.dialogue.split(\"\\n\")\n    let expandedLines = []\n    lines.forEach(line => {\n      expandedLines.push([line])\n    });\n    setDocument(text);\n    setDialogueLines(expandedLines)\n   };\n\n  useEffect(() => {\n     getDocument();\n   }, []);\n\n  let handleSubmit = async () => {\n\n    const summaryRef = doc(db, 'summaries', document.fname);\n    // console.log(summaryRef.get())\n\n    let summaries = []\n    for (let j = 0; j < 3; j++) {\n        let summary = document[\"summary\"+(j+1).toString()]\n        if (summary) {\n          // console.log(document[\"summary\"+(j+1).toString()])\n          summaries.push(summary)\n        }\n    }\n    let salientInfo = []\n    for (let i = 0; i < dialogueLines.length; i++) {\n      for (let j = 1; j < dialogueLines[i]-1; j++) {\n        salientInfo.push(dialogueLines[i][j].text)\n      }\n    }\n    // doc('users/' + user_key)\n\n    const docRef = await addDoc(collection(db, \"responses\"), {\n      salientInfo: salientInfo,\n      scores: {\n        Coherence: criteriaScores['Coherence'],\n        Accuracy: criteriaScores['Accuracy'],\n        Coverage: criteriaScores['Coverage'],\n        Concise: criteriaScores['Concise'],\n        \"Overall Quality\": criteriaScores['Overall Quality']\n      },\n      summary:  summaryRef\n    });\n\n     await setDoc(summaryRef, {\n      dialogue: document.dialogue,\n      fname: document.fname,\n      summary: summaries\n    }, { merge: true });\n\n\n    setAnnotating(true)\n    setCriteriaScores({'Coherence':-1, 'Accuracy':-1, 'Coverage':-1, 'Concise':-1, 'Overall Quality':-1})\n    getDocument()\n  }\n\n  let callbackSetCoherence = (value) => {\n    let currScores = criteriaScores\n    currScores['Coherence'] = value\n    console.log(dialogueLines)\n    setCriteriaScores(currScores)\n  }\n  let callbackSetAccuracy = (value) => {\n    let currScores = criteriaScores\n    currScores['Accuracy'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetCoverage = (value) => {\n    let currScores = criteriaScores\n    currScores['Coverage'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetConcise = (value) => {\n    let currScores = criteriaScores\n    currScores['Concise'] = value\n    setCriteriaScores(currScores)\n  }\n  let callbackSetOverall = (value) => {\n    let currScores = criteriaScores\n    currScores['Overall Quality'] = value\n    setCriteriaScores(currScores)\n  }\n  let criterias = ['Coherence', 'Accuracy', 'Coverage', 'Concise', 'Overall Quality']\n  let criteriaChangeFunctions = {'Coherence':callbackSetCoherence, 'Accuracy':callbackSetAccuracy, 'Coverage':callbackSetCoverage, 'Concise':callbackSetConcise, 'Overall Quality':callbackSetOverall}\n  \n  let marks= {\n\n      \"-2\": ' A mostly better',\n      \"-1\": 'A partially better',\n      0: 'both  equal',\n      1: 'B partially better',\n      2: 'B mostly better'\n  };\n\n\n  \n  let onMouseOverHighlightedWordCallback = (range) => {}\n  let onTextHighlightedCallback = (range) => {  \n    let newDialogueLines = []\n    dialogueLines.forEach(line => {\n      if (line[0]==range.data.text) {\n        line.push(range)\n      }\n      newDialogueLines.push(line)\n    });\n    setDialogueLines(newDialogueLines)\n  }\n  // console.log(document)\n  \n  return (\n    <div className=\"App\">\n      <div>\n        <h2>Please Highlight the Dialogue below!</h2>\n        <h4>Please do not highlight more that one line together:</h4>\n      </div>\n      {\n        dialogueLines ? \n        <>\n        { Array.from({length: dialogueLines.length}, (_, i) => i + 1).map((num) =>(\n          <div className=\"RubricText\"> \n          {dialogueLines[num]? \n           <Highlightable \n          //  ranges={}\n           ranges={dialogueLines[num].slice(1,dialogueLines[num].length)}\n            enabled={annotating}\n            onTextHighlighted={onTextHighlightedCallback}\n            id={1}\n            onMouseOverHighlightedWord={onMouseOverHighlightedWordCallback}\n            highlightStyle={{\n              backgroundColor: '#ffcc80'\n            }}\n            text={dialogueLines[num][0] || \"\"}\n   />\n          : <></>}\n          </div>\n        ) ) }\n        </> : <></>\n      }\n\n      {\n        annotating ? <div>\n              <div>\n                Click Below once you are done annotating\n              </div>\n            <Button type=\"primary\" onClick={showSummary} >Done Annotation</Button>\n        </div>: <></>\n      }\n   \n      {annotating ?  <></>:\n        \n        <div className=\"finalbutton\"> \n        <div className=\"Summaries\" >\n          <div className=\"SummaryVal\">\n            <div><h2>Summary A</h2></div>\n            \n            {document.summary1}\n            </div>\n          <div>\n          <div className=\"SummaryVal\"><h2>Summary B</h2></div>\n            {document.summary2}\n            </div>\n        </div>\n        {criterias.map((criteria) => (\n                      <div className=\"ratings\">\n                        <div className=\"ratingstext\">\n                            <h3>Please compare the two above summaries in regards to their {criteria}</h3>\n                        </div>\n                      <Slider  min={-2} max={2} marks={marks} step={null} onChange={criteriaChangeFunctions[criteria]} defaultValue={0} />\n                      </div>\n              ))}\n              <div className=\"finalbutton\">         <Button type=\"primary\" onClick={handleSubmit} >Submit Results</Button>\n </div>\n\n      </div>\n      }\n      \n        {/* <Slider  min={1} marks={marks('Coherence')} step={null} onChange={criteriaChangeFunctions['Coherence']} defaultValue={-1} /> */} \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}